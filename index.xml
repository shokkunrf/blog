<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>What's happened, happened.</title><link>https://shokkunrf.github.io/blog/</link><description>Recent content on What's happened, happened.</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Mon, 09 Oct 2023 14:45:03 +0900</lastBuildDate><atom:link href="https://shokkunrf.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>ワードウルフを作って実際に遊んだ</title><link>https://shokkunrf.github.io/blog/posts/20231009-word-wolf/</link><pubDate>Mon, 09 Oct 2023 14:45:03 +0900</pubDate><guid>https://shokkunrf.github.io/blog/posts/20231009-word-wolf/</guid><description>ワードウルフを作った ワードジャンルを絞ったニッチなワードウルフを作った。
作り始める前に、パーティーゲームをよくする集まりに &amp;ldquo;こんなワードウルフ楽しそうじゃない？&amp;rdquo; と提案してアイデアのウケがよかったから作る決心ができた。 実際に利用する場面が身近に想像できるというのはとても大切なことなんだと思う。
開発についてはSvelteKitを使って3日くらいで完成させた。
一般的なワードウルフのアプリをやったことがあったから、ほぼほぼそれの模倣ではあるし、ワードウルフというゲーム自体に必要なパラメータが少ないから難しくなかった。 すぐに完成させることを目標としていて、身内でしか使わないものだから、ということでエラーハンドリングなどはほとんどしていない。
なぜSvelteKitを採用したかについては特筆するようなことはなく、ただReactだとCSSライブラリを感がなくてはならないし、Vueを使うならSvelteでいいやとフワッっとした理由。
ワードウルフを遊んだ かなりウケた。つまり高評価を得られた。
異常な動作はなく、見た目もアプリっぽくしたおかげかな？
簡単なつくりにしてよかった。
&amp;ldquo;一般公開してみたらいいんじゃない？&amp;rdquo; と言ってもらえたが、ニッチすぎるワードジャンルをハードコードしてたり、エラーハンドリングをやっていなかったりなため、このまま公開するのは難しそう。 ただ、ワードウルフのフレームワークは作れたわけだから、やる気さえあれば公開できるかもしれない。 そのときには今回のメンバーにも企画開発に参画してもらうかな。
パーティーゲームを考える ワードウルフに限らずオフラインでできるパーティーゲームって作るの楽しそう。
今回のようにスマホ1つを回すことで成立するゲームだと良い。開発の面ではセッションとか考えなくていいし、通信量とかも気にならない。加えて、心理戦的なゲームであればプレイヤーの視線をスマホから離せるほうがゲームとして楽しい。
実際にやってみて楽しかったパーティーゲームをパクるだけでもたぶん楽しい。専用のカードを持ち歩かなくて済むから、いつでもどこでも遊べるようになる。
ゴキブリポーカーでカードを伏せるようにスマホを伏せるとかも考えると、スマホ1つでもできることって意外と多いかも。ちょっと話してみようかな。</description></item><item><title>キャプボHDMVC4UCを攻略する</title><link>https://shokkunrf.github.io/blog/posts/20231007-hdmvc4uc/</link><pubDate>Sat, 07 Oct 2023 10:31:33 +0900</pubDate><guid>https://shokkunrf.github.io/blog/posts/20231007-hdmvc4uc/</guid><description>サンコー(thanko)のHDMIビデオキャプチャーカード HDMVC4UCの接続に困ったため記録を残しておく。
https://amzn.asia/d/dUakPae 確認すること PCIeの設定がGen1になっているか 映像入力している機器の解像度がHDになっているか 経緯 友人からもらった 動作確認のために、ノートPCをミラーリングして接続したがなにも映らない。
某サイトにあったPCI Expressの速度設定を「Gen1」にするで認識
しかしHDMVC4UCは当時の値段の割にいいカードだと思うけど尼の新品価格やべーな
この値段出すなら最近のやつ買うは・・・
&amp;mdash; あるて (@arte_l) December 9, 2017 このTweetに従ってPCIeの設定をGen1にしたところ、一瞬だけノイズまみれで映った。
そこで取説を読み返すとHDキャプチャーボードと書いてある。 もしかしてと思い、映像入力をHDにしたところ利用できた。
キャプボ自体がケースと合わなくてマザボに対して若干斜めに接続されてるけど、まぁ動いてるしいいか。
資料 https://amzn.asia/d/dUakPae https://twitter.com/arte_l/status/939581729345495040</description></item><item><title>Second Post</title><link>https://shokkunrf.github.io/blog/posts/20230923-second-post/</link><pubDate>Sat, 23 Sep 2023 12:31:22 +0900</pubDate><guid>https://shokkunrf.github.io/blog/posts/20230923-second-post/</guid><description>ブログを再開してみた。
6月末くらいから日記をつけている &amp;ldquo;今日できたことを記録するといいよ。意外といろいろやってるから。&amp;rdquo;
これは前々から友人に言われていたこと。
日々仕事をしていると自分の意志のある時間なんてほとんどない。 食って寝るか食わずに寝るかの違いしかない。 何も為していない。そんな風に悲観の波に襲われていた。
そこで前述の言葉を思い出して日記を始めてみた。 最初は何を食べたかとか買い出しに行ったとかそんなことを書いていた。2行とかの日もあった。 それでも毎日続けていくと量も質も上がっていくもので、今では3行になった。
書き慣れてみると確かに意外とやっている。何もしてないわけじゃないことに気づけると失敗も嬉しい。 おかげで悲観の海は凪いでいる。
こうして毎日日記を書いていると、量が増えてきて振り返りにくくなる。 前にもこんなこと考えたなぁとか話のネタとして引っ張り出したいときに不便に思っていた。 ということで、ここにまとめていく。
内容としては日記のまとめということもあって、技術よりも思考や感情についてが多くなると思う。
ブログタイトルをつけた &amp;ldquo;What&amp;rsquo;s happened, happened.&amp;rdquo;
映画TENETに登場するセリフ。
&amp;ldquo;起きたことは仕方ない。この世界の理だが、何もしない理由にはならない。&amp;rdquo; と続く。 この映画を表していてとても好きなセリフ。 未来が決定している世界観だからこそのセリフではあるが、未来がわからない現実であっても読み取れるエッセンスがある。 これについて書いていたら脱線し始めたのでまた別記事にしよう。 とりあえず、ブログタイトルは映画TENETからの引用だよ。TENET見てね！
TENET - Amazon Prime Video モチベのために 再開するにあたって、ブログにいろいろと手を加えてみた。 ブログタイトルをつけたのもモチベ向上の一環。 他にも、ブログのレウアウトを変更してみた。
前回はAnankeテーマをそのまま利用していたが、自分が使いやすいように変更してみた。それでもほぼほぼAnankeだけど。
あとブログテンプレートと記事のcommitが混ざるのが嫌だったため、記事を別Repoistoryに移し、git submoduleを使うことにした。
前回ブログが続かなかったのはこれらのせいだった。まだ変えたいところはいくつかあるけれど、ひとまずリリース。
これからは続けるためにモチベを重視する。 そんなん気にせずやればいいじゃんと自分によく言っていたけれど、自分の気持ちも大事だよ。
First Postを振り返る ブログを始める動機だったり、意気込みだったり、今と変わってない。 今回も140字書けたら上等だと思って続けていこう。ハードルは低めに。 そう、ここはTwitterの避難先。
First Post</description></item><item><title>TypeScript v4 + React v17でEmotion v11を動かしてみる</title><link>https://shokkunrf.github.io/blog/posts/start-emotion-css/</link><pubDate>Sun, 31 Jan 2021 23:03:49 +0900</pubDate><guid>https://shokkunrf.github.io/blog/posts/start-emotion-css/</guid><description>Emotion v11の導入につまずいたので残しておく。
今回の環境 TypeScript: 4.1.3 React: 17.0.1 react-script: 4.0.1 @emotion/react: 11.1.4 つまづきから解決まで craでReactのひな形を生成する 次のコマンドでfacebookが提供しているTSを使ったReactのテンプレートを生成する。
npx create-react-app myapp --template typescript App.tsxを次のように変更する。(この記事のために簡素にする)
import React, { FC } from &amp;#39;react&amp;#39;; const App: FC = () =&amp;gt; ( &amp;lt;div&amp;gt; red &amp;lt;/div&amp;gt; ); export default App; つまづき emotion v11のReact用パッケージ@emotion/reactをインストール。
npm install @emotion/react tsconfig.jsonに以下を追加し、Reactのjsxではなくemotionのjsxを使うように設定する。
&amp;#34;compilerOptions&amp;#34;: { &amp;#34;jsxImportSource&amp;#34;: &amp;#34;@emotion/react&amp;#34; } App.tsxにスタイルを追加する。
import React, { FC } from &amp;#39;react&amp;#39;; import { css } from &amp;#39;@emotion/react&amp;#39;; const myStyle = css` color: red; `; const App: FC = () =&amp;gt; ( &amp;lt;div css={myStyle}&amp;gt; red &amp;lt;/div&amp;gt; ); export default App; これでコンパイルは通るがなぜかスタイルが適用されない。</description></item><item><title>First Post</title><link>https://shokkunrf.github.io/blog/posts/first-post/</link><pubDate>Mon, 21 Dec 2020 21:53:52 +0900</pubDate><guid>https://shokkunrf.github.io/blog/posts/first-post/</guid><description>ブログを始めてみた なんでブログを始めたの？ 一番の理由は、メモの管理に困ってたから。
これまでは、メモをディレクトリで分けていて、量が増えるにつれて探すことが難しくなっていた。
また、作業の目的が書いていなかったり、前提条件がわからなかったりで振り返れないメモがあった。
これらを、タグ機能を使って記事を管理し、公開することを意識して書くことで解決できるのはないかと思い、ブログを始めてみることにした。
なんでHugoを選んだの？ Hugoを使っている友人がいたから、お互いに困ったときに情報共有できると思って選んだ。
他にもHugoのリポジトリの更新も続いてるみたいだし、Jamstackを見ても人気みたいだし。
あとこのQiita記事につられて30分でできると思ったから。
まぁ2つ目以降の理由なんてみんな後付けなんだけども。
Hugoでブログを始める手順 技術ブログっぽいものも書いてみる。
手順といってもHugoのクイックスタートに沿って進めるだけ。
この記事ではHugo v0.79.1を使い、Debian10を前提とする。
1. Hugoをインストールする Hugo ReleasesからOSにあったパッケージをダウンロードし、インストールする
今回はhugo_0.79.1_Linux-64bit.debをインストールする。
hugoがインストールされているか確認する
hugo version 2. サイトを作成する GitHubでリポジトリを作成する
今回はblogというリポジトリを作った。
ローカルにリポジトリをクローンする
git clone git@github.com:shokkunrf/blog.git cd blog リポジトリ内にサイトを作成する
fooは適当に付けた。好きな文字列でOK。
hugo new site foo mv ./foo/* ./ rm -R ./foo 3. テーマを追加する Hugo のスタイルテーマからテーマを選ぶ
クイックスタートにあったAnankeを使ってみる。
選んだテーマのGitHubリポジトリをthemes/に追加する</description></item></channel></rss>